//give them a hint for event listeners click listeners 
p:first
chaining .hid.show.fadeout
jQuery: GET(select), DO

on lets you respond to user interface
keyword this
//reference back to linked list and reference.
$('.person').hide();

without jQuery, when you write DOM manipulation,
depending on which browser you're using its different
firefox commands for manipulating DOM elements is slightly different from Chrome, IE9, etc

polyfill is writing javascript that detects to see if a certain feature currently exists in wahtever version of the browser and if it doesn't exist injects it automatically. You use to have to write these code before jQuery. It's ridiculous.

AJAX method that allows you get and send information to remote servers. 

Passing in a string vs string that evaluates to html. It creates a dom node if you pass in <div>.

when you pass in a css selector to jQuery, it returns a jquery array, which is a normal array. 
Delegates to jQuery object and gives it access to jQuery Objects.

It's array like container, 0~n DOM nodes. it will also have the methods it can access

DOM is not the same as HTML.
DOM or document object mode. collection of javascript nodes in a tree hierarchy.
HTML is simply a single property of a DOM node. 

HTML is which is a string, browser takes that string, parses it renders a javascript object, which is a node in the DOM.

Browser needs a data-structure. Allows it to contain all the information it needs to access to display what user sees very quickly and effeciently (hint back to trees).

Browser stores info (example css) console.dir(x);

explain why it looks like this. why is it not an object (show on click/mouseover)


we have to use these three methods on document in js.

document.getElementById
document.getElementsByClassname
document.getElementsByTagName
document.querySelector
document.querySelectorAll

var divElements = document.getElementsByTagName("div");
var toggleVisibility = function(element) {
  if (!document.getElementsByTagName) {
    return;
  }

  if (element.style.visibility === "visible") {
    element.style.display = "hidden";
  } else {
    element.style.display ="visible";
  }
};

selecting elements
adding/removing classes and attributes from elements
hiding/showing/deleting/moving elements
adding events to elements
...and much, much, more


